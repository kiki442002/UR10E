###
# summary: This function is used to split a string into an array of substrings with a delimiter
# @param str :string the string to split
# @param delimiter :string the caracter to split the string
# @param debug :bool activ message debug
###
MAX_VARIABLES = 100
def str_split(str, delimiter, debug=False):
  result = make_list(0, "", MAX_VARIABLES) # Arrays to stock the result max 10 variables
  start = 0  # Position to start the search
  end_deli = str_find(str, delimiter) #Find the first delimiter

  # While a delimiter is found
  while end_deli != -1:
    if result.excess_capacity() == 0:
      if debug:
        textmsg("Number of variables exceeded")
      end
      return result
    end

    # Extraction of the substring between the start and the delimiter
    substring = str_sub(str, start, end_deli - start)
    result.append(substring)

    # Update the start position and the end delimiter
    str = str_sub(str, end_deli + str_len(delimiter), str_len(str))
    end_deli = str_find(str, delimiter)
  end

  # Add the last substring
  if result.excess_capacity() > 0:
    result.append(str)
  elif debug:
    textmsg("Number of variables exceeded")
  end

  if debug:
    textmsg("Result: " + result.to_string())
  end
  return result
end


###
# summary: This function to return the value of a variable in a JSON string function only with string type
# @param json_string :string the json payload
# @param variable :string the variable the function needs to find
# @param debug :bool activ message debug
###
def value_json_string(json_string, variable, type="str",debug=False):
  #Verify the json string is not empty (2 brackets at minimal)
  if str_len(json_string) < 2:
    if debug:
      textmsg("The JSON string is empty or invalid")
    end
    if(type == "int"):
      return 0
    end
    return " "
  end

  json_string = str_sub(json_string, 1, str_len(json_string) - 2) #Cut the first and last bracket
  variable_array = str_split(json_string, ",", debug) #Split the json string into an array of variables

  idx = 0 #Index of the array
  len_var_array = variable_array.length() #Length of the array

  #While the index is less than the length of the array
  while idx < len_var_array:

    find = str_find(variable_array[idx], variable) #Find the variable in the array
    if find > 0: #If the variable is found
      if debug:
        textmsg("Variable found")
      end
      value = str_split(variable_array[idx], ":")[1] #Split the variable to get the value
      if str_find(value, "'")>0: #If the value is a string
        return str_sub(value, 2, str_len(value) - 3) #Return the value without the quotes
      end
      if(type == "int"):
        return to_num(value)
      end
      return str_sub(value, 1, str_len(value) - 2) #Return the value without the quotes
    end
    idx = idx + 1
  end
  if(type == "int"):
    return 0
  end
  return " "
end